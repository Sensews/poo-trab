package modelo;

/**
 * REQUISITO 2: Uma das 5+ classes do programa
 * REQUISITO 6: Segunda rela√ß√£o de heran√ßa (Gato extends CriaturaVirtual)
 * REQUISITO 7: Sobrescreve m√©todos da superclasse
 * REQUISITO 8: Usada polimorficamente como CriaturaVirtual
 */
public class Gato extends CriaturaVirtual {
    
    public Gato(String nome) {
        super(nome);
        // Gatos come√ßam com mais felicidade
        this.felicidade = Math.min(100, this.felicidade + 10);
    }

    /**
     * REQUISITO 4: Implementa√ß√£o de m√©todo abstrato
     */
    @Override
    public void emitirSom() {
        System.out.println(nome + " faz: Miau miau! üê±");
    }

    @Override
    public String getTipo() {
        return "Gato";
    }

    @Override
    public void habilidadeEspecial() {
        System.out.println(nome + " est√° se lambendo e ficando mais limpo!");
        System.out.println("Gatos s√£o naturalmente higi√™nicos!");
        
        // Melhora um pouco a sa√∫de e felicidade
        setSaude(Math.min(100, getSaude() + 5));
        setFelicidade(Math.min(100, getFelicidade() + 8));
        
        System.out.println("Sa√∫de e felicidade aumentaram!");
    }    /**
     * REQUISITO 7: M√©todo sobrescrito (n√£o abstrato) - DEMONSTRA√á√ÉO DO REQUISITO 7
     * Este m√©todo mostra o polimorfismo em a√ß√£o: cada animal tem comportamento √∫nico ao brincar
     * Gato: Ganha felicidade moderada (+5) de forma elegante e controlada
     * Este m√©todo √© chamado na interface e mostra comportamento espec√≠fico para o usu√°rio
     */
    @Override
    public void brincar() {
        super.brincar();
        // Gatos ganham mais felicidade brincando
        setFelicidade(Math.min(100, getFelicidade() + 5));
        System.out.println(nome + " brincou com uma bolinha de l√£ e adorou!");
    }
}
